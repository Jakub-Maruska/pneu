(function(){const r=document.createElement("link").relList;if(r&&r.supports&&r.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))o(s);new MutationObserver(s=>{for(const i of s)if(i.type==="childList")for(const c of i.addedNodes)c.tagName==="LINK"&&c.rel==="modulepreload"&&o(c)}).observe(document,{childList:!0,subtree:!0});function t(s){const i={};return s.integrity&&(i.integrity=s.integrity),s.referrerPolicy&&(i.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?i.credentials="include":s.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function o(s){if(s.ep)return;s.ep=!0;const i=t(s);fetch(s.href,i)}})();const n={apiKey:"AIzaSyAEV9VCbQOFA763ULbg2H9N7YPONHFo9ys",authDomain:"pneu-ee1d6.firebaseapp.com",projectId:"pneu-ee1d6",storageBucket:"pneu-ee1d6.firebasestorage.app",messagingSenderId:"703642287813",appId:"1:703642287813:web:e5a25fe039e09883cb7aac",measurementId:"G-5Z9VW7RB1F"};firebase.initializeApp(n);const l=firebase.appCheck();l.activate(new firebase.appCheck.ReCaptchaV3Provider("YOUR_RECAPTCHA_V3_SITE_KEY"),{isTokenAutoRefreshEnabled:!0});const a=firebase.firestore(),d={async getTires(){try{return(await a.collection("tires").get()).docs.map(r=>{const t=r.data();return{id:r.id,customId:t.customId||t.id,...t,status:t.status||"available"}})}catch(e){return console.error("Error getting tires:",e),[]}},async addTire(e){try{return{id:(await a.collection("tires").add(e)).id,customId:e.customId,...e}}catch(r){throw console.error("Error adding tire:",r),r}},async updateTire(e,r){try{await a.collection("tires").doc(e).update(r)}catch(t){throw console.error("Error updating tire:",t),t}},async deleteTire(e){try{await a.collection("tires").doc(e).delete()}catch(r){throw console.error("Error deleting tire:",r),r}},async getTrucks(){try{return(await a.collection("trucks").get()).docs.map(r=>({id:r.id,...r.data()}))}catch(e){return console.error("Error getting trucks:",e),[]}},async addTruck(e){try{const r=e.licensePlate.replace(/\s/g,"");return await a.collection("trucks").doc(r).set(e),{id:r,...e}}catch(r){throw console.error("Error adding truck:",r),r}},async updateTruck(e,r){try{await a.collection("trucks").doc(e).update(r)}catch(t){throw console.error("Error updating truck:",t),t}},async deleteTruck(e){try{await a.collection("trucks").doc(e).delete()}catch(r){throw console.error("Error deleting truck:",r),r}},async getTrailers(){try{return(await a.collection("trailers").get()).docs.map(r=>({id:r.id,...r.data()}))}catch(e){return console.error("Error getting trailers:",e),[]}},async addTrailer(e){try{const r=e.licensePlate.replace(/\s/g,"");return await a.collection("trailers").doc(r).set(e),{id:r,...e}}catch(r){throw console.error("Error adding trailer:",r),r}},async updateTrailer(e,r){try{await a.collection("trailers").doc(e).update(r)}catch(t){throw console.error("Error updating trailer:",t),t}},async deleteTrailer(e){try{await a.collection("trailers").doc(e).delete()}catch(r){throw console.error("Error deleting trailer:",r),r}},async getTireSlots(e,r){try{const t=await a.collection(`${e}_slots`).doc(r).get();return t.exists?t.data().slots:[]}catch(t){return console.error("Error getting tire slots:",t),[]}},async updateTireSlots(e,r,t){try{await a.collection(`${e}_slots`).doc(r).set({slots:t});const o=t.filter(c=>c.tire).length,s=t.length,i=this.calculateVehicleStatus(t);console.log(`Updating ${e} ${r}:`,{assignedCount:o,totalSlots:s,newStatus:i,slots:t.map(c=>c.tire?{id:c.tire.id,km:c.tire.km}:null)}),e==="truck"?await this.updateTruck(r,{tiresAssigned:o,totalTires:s,status:i}):e==="trailer"&&await this.updateTrailer(r,{tiresAssigned:o,totalTires:s,status:i})}catch(o){throw console.error("Error updating tire slots:",o),o}},calculateVehicleStatus(e){const r=e.filter(s=>s.tire&&s.tire.km!==void 0);return r.length===0?"good":r.some(s=>(s.tire.km||0)>=2e5)?"danger":r.some(s=>{const i=s.tire.km||0;return i>=15e4&&i<2e5})?"warning":"good"},onTiresUpdate(e){return a.collection("tires").onSnapshot(r=>{const t=r.docs.map(o=>({id:o.id,...o.data()}));e(t)})},onTrucksUpdate(e){return a.collection("trucks").onSnapshot(r=>{const t=r.docs.map(o=>({id:o.id,...o.data()}));e(t)})},onTrailersUpdate(e){return a.collection("trailers").onSnapshot(r=>{const t=r.docs.map(o=>({id:o.id,...o.data()}));e(t)})},onTireSlotsUpdate(e,r,t){return a.collection(`${e}_slots`).doc(r).onSnapshot(o=>{if(o.exists){const s=o.data().slots||[];t(s)}else t([])})},async getVehicleKm(e){try{const r=await a.collection("vehicles_km").doc(e).get();return r.exists?r.data().kilometers:null}catch(r){return console.error("Error getting vehicle kilometers:",r),null}},onVehicleKmUpdate(e,r){return a.collection("vehicles_km").doc(e).onSnapshot(t=>{t.exists?r(t.data().kilometers):r(null)})},async getAllVehicleKms(){try{const e=await a.collection("vehicles_km").get(),r={};return e.docs.forEach(t=>{r[t.id]=t.data().kilometers}),r}catch(e){return console.error("Error getting all vehicle kilometers:",e),{}}},async getAllTireSlots(e){try{const r=await a.collection(`${e}_slots`).get(),t={};return r.docs.forEach(o=>{t[o.id]=o.data().slots||[]}),t}catch(r){return console.error(`Error getting all ${e} tire slots:`,r),{}}},onAllVehicleKmsUpdate(e){return a.collection("vehicles_km").onSnapshot(r=>{const t={};r.docs.forEach(o=>{t[o.id]=o.data().kilometers}),e(t)})},async getAuthPassword(){try{const e=await a.collection("settings").doc("auth").get();return e.exists&&e.data().password?e.data().password:(console.error("CRITICAL: Password not configured in Firestore at 'settings/auth'. Login will be disabled until it is set."),null)}catch(e){return console.error("Error getting auth password:",e),null}}};export{d as D};
